#-*- coding: utf-8 -*-# Python中进行Base64编码和解码# >>> import base64# >>> s = '我是字符串'# >>> a = base64.b64encode(s)# >>> print a# ztLKx9fWt/u0rg==# >>> print base64.b64decode(a)# 我是字符串# 1 Python中zlib库的使用# 1.1 使用zlib解压缩字符串：# 1.2 使用zlib解压缩文件# 1.3 总结# 1.3.1 zlib又来压缩“数据”。# 1.3.2 zlib对文件的操作可以看作是文件的存档。# 1.3.3 其它面向对象语言（比如cpp）需要wapper zlib的时候可以参照python的wapper思想。# 1 Python中zlib库的使用# 最近需要添加zlib库到项目里面，现学习一下。文档可以参照这里：http://docs.python.org/library/zlib.html# # 1.1 使用zlib解压缩字符串：# import zlib# message = 'aaaabbbbccccdddd'# compressed = zlib.compress(message)# decompressed = zlib.decompress(compressed)# print 'original:', repr(message)# print 'compressed:', repr(compressed)# print 'decompressed:', repr(decompressed)# 1.2 使用zlib解压缩文件# def compress(infile, dst, level=9):#     infile = open(infile, 'rb')#     dst = open(dst, 'wb')#     compress = zlib.compressobj(level)#     data = infile.read(1024)#     while data:#         dst.write(compress.compress(data))#         data = infile.read(1024)#     dst.write(compress.flush())# def decompress(infile, dst):#     infile = open(infile, 'rb')#     dst = open(dst, 'wb')#     decompress = zlib.decompressobj()#     data = infile.read(1024)#     while data:#         dst.write(decompress.decompress(data))#         data = infile.read(1024)#     dst.write(decompress.flush())# 1.3 总结# 1.3.1 zlib又来压缩“数据”。# 1.3.2 zlib对文件的操作可以看作是文件的存档。# 1.3.3 其它面向对象语言（比如cpp）需要wapper zlib的时候可以参照python的wapper思想。# Author: Luo.ZhiHui<camel.flying@gmail.com># # Date: 2012-04-28 02:13:27 CST# # HTML generated by org-mode 6.33x in emacs 23import base64import zlibimport structbasezipstr = 'eJzt18ENAjEMAMFc/4JCoBCuLO7DM0h88D5mKrC8UhSvBQAAAMC027HW/Ziego/H1eKpR4YeLXq06NGiR4seLa+rxanHT9wIexO78absTexGjz09WvRo0aNFj5aJ3bgR9qq7Kd0opVmmlN600ixTSjsozTKltIPSLFNKOyjNMqW0g9IsU0o7KM0ypfQPL83Cd26TFm9Zix4terTo0aJHix4tbhMA4J/etYZAUQ=='import Cmds_pb2teststr = '''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'''teststr2 = 'dPAQVQMwJVAAxRNwBVWA5RMwxRBGB3bHF2PTQEVgFfVVkCAk8EMVAOAFwHM1FWAVwACVUPCAMKATlWAgVcAVRcUgQPUgMeUQkAYAQFWlwBYAAPXQQJNA0HBTx3YiJ/O2dTBQVcAQhRCB9QNwBUUA5MAAFlCw8HBQAIVQMGVwNRZ1MFBlwCBlgKB1sFA01SA1AzCFQECA0KMxoNMTQ2NjY2Mzc5MTM0OQ=='codex = base64.decodestring(teststr2)print codexprotoserver = Cmds_pb2.sMarketMsgData()protoserver.ParseFromString(codex)print protoserver# basezipout = base64.b64decode(basezipstr)# decompressed = zlib.decompress(basezipout)# datax = struct.unpack('4800i', decompressed)  # print datax