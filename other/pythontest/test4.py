#!/usr/bin/env python# -*- coding: utf-8 -*-from Queue import Queue  import random  import threading  import time  #Producer thread  class thread1(threading.Thread):      def __init__(self, t_name, queue,backqueue,pEvent):          threading.Thread.__init__(self, name=t_name)          self.queue=queue          self.backqueue = backqueue        self.selfEvent = pEvent                self.queue2 = Queue()        self.backqueue2 = Queue()        self.event2 = threading.Event()        self.t2 = thread2('thread2',self.queue2,self.backqueue2,self.event2)        self.t2.setDaemon(True)        self.t2.start()                self.queue3 = Queue()        self.backqueue3 = Queue()        self.event3 = threading.Event()        self.t3 = thread3('thread3',self.queue3,self.backqueue3,self.event3,self.selfEvent)        self.t3.setDaemon(True)        self.t3.start()    def run(self):          while True:            if not self.queue.empty():                dat = self.queue.get()                if dat == '1':                    print self.getName()                    for i in range(10):                        print 'thread1->%d'%i                elif dat == '2':                    print 'thread1: queue = 2'                    self.queue2.put('1')                    self.event2.set()                elif dat == '3':                    print 'thread1: queue = 3'                    self.queue3.put('1')                    self.event3.set()                elif dat == '5':                    print 'thread1:queue = 5'                    self.queue3.put('2')                    self.event3.set()            if not self.backqueue3.empty():                dat = self.backqueue3.get()                if dat == '4':                    print "thread1 run form thread3"                    self.queue2.put('1')                    self.event2.set()#Consumer thread  class thread2(threading.Thread):      def __init__(self, t_name, queue,backqueue,pEvent):          threading.Thread.__init__(self, name=t_name)          self.queue=queue        self.backQueue = backqueue        self.selfEvent = pEvent      def run(self):          while True:            if not self.queue.empty():                dat = self.queue.get()                if dat == '1':                    print self.getName() class thread3(threading.Thread):      def __init__(self, t_name, queue,backqueue,pEvent,pEvent2):          threading.Thread.__init__(self, name=t_name)          self.queue=queue          self.backqueue = backqueue        self.selfEvent = pEvent        self.pEvent2 = pEvent2    def run(self):          while True:            if not self.queue.empty():                dat = self.queue.get()                if dat == '1':                    print self.getName()                elif dat == '2':                    print 'thread3 get dat=2'                    self.backqueue.put('4')                    self.pEvent2.set()#Main thread  def main():      queue1 = Queue()    backqueue1 = Queue()    event1 = threading.Event()    t1 = thread1('thread1',queue1,backqueue1,event1)    t1.setDaemon(True)    t1.start()    while(True):        print 'xxxx'        #time.sleep(3)        queue1.put('1')        queue1.put('5')        if not event1.is_set():            event1.set()        #time.sleep(3)        if not event1.is_set():            print 'event1 is not set'            queue1.put('5')            event1.set()        else:            print 'event1 is set'            queue1.put('5')            event1.set()        #time.sleep(3)        if not event1.is_set():            print 'event1 is not set'            queue1.put('5')            event1.set()        else:            print 'event1 is set'            queue1.put('5')            event1.set()        #time.sleep(3)        if not event1.is_set():            print 'event1 is not set'            queue1.put('5')            event1.set()        else:            print 'event1 is set'            queue1.put('5')            event1.set()        time.sleep(5)    print 'All threads terminate!'  if __name__ == '__main__':      main()