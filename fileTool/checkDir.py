#!/usr/bin/env python#-*- coding: utf-8 -*-import osimport sysreload(sys)#sys.setdefaultencoding('utf8')#获取脚本路径def cur_file_dir():    pathx = sys.argv[0]    tmppath,_file = os.path.split(pathx)    if cmp(tmppath,'') == 0:        tmppath = sys.path[0]    #判断为脚本文件还是py2exe编译后的文件，如果是脚本文件，则返回的是脚本的目录，如果是py2exe编译后的文件，则返回的是编译后的文件路径    if os.path.isdir(tmppath):        return tmppath    elif os.path.isfile(tmppath):        return os.path.dirname(tmppath)    #获取父目录def GetParentPath(strPath):    if not strPath:        return None;    lsPath = os.path.split(strPath);    if lsPath[1]:        return lsPath[0];    lsPath = os.path.split(lsPath[0]);    return lsPath[0];#获取目录下的所有类型文件def getAllExtFile(pth,fromatx = ".erl"):    jsondir = pth    jsonfilelist = []    for root, _dirs, files in os.walk(jsondir):        for filex in files:                      #print filex            name,text = os.path.splitext(filex)            if cmp(text,fromatx) == 0:                jsonArr = []                rootdir = pth                dirx = root[len(rootdir):]                pathName = dirx +os.sep + filex                jsonArr.append(pathName)                (newPath,_name) = os.path.split(pathName)                jsonArr.append(newPath)                jsonArr.append(name)                jsonfilelist.append(jsonArr)            elif fromatx == ".*" :                jsonArr = []                rootdir = pth                dirx = root[len(rootdir):]                pathName = dirx +os.sep + filex                jsonArr.append(pathName)                (newPath,_name) = os.path.split(pathName)                jsonArr.append(newPath)                jsonArr.append(name)                jsonfilelist.append(jsonArr)    return jsonfilelist#获取一个路径中所包含的所有目录及子目录def getAllLevelDirs(dirpths):    dirleves = []    dirtmp = ''    for d in dirpths:        dirtmp += '/' + d        dirleves.append(dirtmp)    return dirleves#获取一个目录下的所有子目录路径def getAllDirs(spth):    files = getAllExtFile(spth,'.*')    makedirstmp = []    isOK = True    # 分析所有要创建的目录    for d in files:        if d[1] != '/' and (not d[1] in makedirstmp): #创建未创建的目录层级            tmpdir = d[1][1:]            tmpleves = tmpdir.split('/')            alldirs = getAllLevelDirs(tmpleves)            for dtmp in alldirs:                if not dtmp in makedirstmp:                    makedirstmp.append(dtmp)    return makedirstmp#获取目录下的所有文件路径def getAllFiles(spth):    files = getAllExtFile(spth,'.*')    makedirstmp = []    isOK = True    # 分析所有要创建的目录    for d in files:        makedirstmp.append(d[0])    return makedirstmpdef getProjectResPth():    codespth = cur_file_dir()    toolspth = GetParentPath(codespth)    projectPth = GetParentPath(toolspth)    return projectPth + os.sep + 'res'def isFile(filename):    try:        with open(filename) as f:            return True    except IOError:        return Falsedef finddir(arg,dirname,filenames):    name,text = os.path.split(dirname)    dirnametmp = str(dirname)    if text and text[0] == '.':        print dirname        print filenames        os.system('rm -r %s'%(dirname))        return    elif filenames:        for f in filenames:            if f[0] == '.' and isFile(dirname + f):                fpthtmp = dirname + f                if f.find(' '):                    nf = f.replace(' ','\ ')                    fpthtmp = dirname + nf                print dirname + f                os.system('rm  %s'%(fpthtmp))#删除所有项目res目录下的所有"."开头的文件名和目录名def removeProjectAllHideDir(pth):    alldirs = getAllDirs(pth)    if not ('/' in alldirs):        alldirs.append('/')    for d in alldirs:        tmpth = pth + d        os.path.walk(tmpth, finddir, 0)#主方法def main(pth):    removeProjectAllHideDir(pth)if __name__ == '__main__':    args = sys.argv    fpth = ''    if len(args) == 2 :        if os.path.exists(args[1]):            fpth = args[1]        else:            print fpth            print "路径不存在"    else:        fpth = getProjectResPth()        print "删除默认路径下'.'开头的隐藏目录和隐藏文件:%s"%(fpth)    main(fpth)